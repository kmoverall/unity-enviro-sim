// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ProcessCritters

struct CritterData {
	float health;
    float consumption;
    float timeDrain;
    float isAlive;
	float timeSinceDecision;
	float2 movementDirection;
	float speed;
};

globallycoherent RWTexture2D<float4> EnergyField;
RWStructuredBuffer<CritterData> Data;
RWStructuredBuffer<float2> Positions;
StructuredBuffer<int> DrawArgs;

int2 Sim_EnergyFieldSize;
//x is the cap on energy in the field, y is the cap on critter energy
float2 Sim_EnergyCaps;
float Unity_DeltaTime;
uint Unity_Time;
float Sim_DecisionFreq;

//Xorshift32 PRNG, altered to return a float [0-1]
//https://en.wikipedia.org/wiki/Xorshift
float rand_range(inout uint seed)
{
	uint x = seed;
	x ^= x << 13;
	x ^= x >> 17;
	x ^= x << 5;
	seed = x;

	return x / 4294967295.0f;
}

int2 rand_max_position(int2 a, int2 b, inout uint seed)
{
	
	float x = EnergyField[a].r;
	float y = EnergyField[b].r;

	if (x > y)
	{
		return a;
	}
	else if (x < y)
	{ 
		return b;
	}
	else
	{
		float coinFlip = round(rand_range(seed));
		return coinFlip * a + (1-coinFlip) * b;
	}
}

float2 DecideDirection(float2 pos, int2 iPos)
{
	int2 sample_L = iPos.x > 0 ? int2(-1, 0) : int2(0, 0);
	int2 sample_R = iPos.x < Sim_EnergyFieldSize.x - 1 ? int2(1, 0) : int2(0, 0);
	int2 sample_D = iPos.y > 0 ? int2(0, -1) : int2(0, 0);
	int2 sample_U = iPos.y < Sim_EnergyFieldSize.y - 1 ? int2(0, 1) : int2(0, 0);

	uint seed = iPos.x ^ iPos.y ^ (Unity_Time ^ (Unity_Time << 13) ^ (Unity_Time >> 17));
	//seed can't be 0
	seed = seed == 0 ? seed + 1 : seed;
	int2 newPos = rand_max_position(iPos, iPos + sample_L, seed);
	newPos = rand_max_position(newPos, iPos + sample_R, seed);
	newPos = rand_max_position(newPos, iPos + sample_D, seed);
	newPos = rand_max_position(newPos, iPos + sample_U, seed);
	newPos = rand_max_position(newPos, iPos + sample_L + sample_U, seed);
	newPos = rand_max_position(newPos, iPos + sample_R + sample_D, seed);
	newPos = rand_max_position(newPos, iPos + sample_R + sample_U, seed);
	newPos = rand_max_position(newPos, iPos + sample_L + sample_D, seed);

	return newPos - iPos;
}

[numthreads(1024,1,1)]
void ProcessCritters (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= DrawArgs[0] || !Data[id.x].isAlive) {
		return;
	}

	CritterData specs = Data[id.x];

	float2 pos = Positions[id.x];
	int2 iPos;
	iPos = round(pos - 0.5) + (Sim_EnergyFieldSize.xy / 2);

	if (specs.timeSinceDecision > Sim_DecisionFreq)
	{
		specs.movementDirection = DecideDirection(pos, iPos);
		specs.timeSinceDecision = 0;
	}
	else
	{
		specs.timeSinceDecision += Unity_DeltaTime;
	}

	pos += specs.movementDirection * Unity_DeltaTime * specs.speed;
	pos = clamp(pos, -Sim_EnergyFieldSize / 2.0f, Sim_EnergyFieldSize / 2.0f);
	iPos = round(pos - 0.5) + (Sim_EnergyFieldSize.xy / 2);

	float energyGain = min(EnergyField[iPos].r, specs.consumption * Unity_DeltaTime);

	EnergyField[iPos] -= energyGain;

	specs.health += energyGain;
	specs.health -= specs.timeDrain * Unity_DeltaTime;
	specs.health = clamp(specs.health, 0, Sim_EnergyCaps.y);

	if (specs.health == 0)
		specs.isAlive = 0;

	Data[id.x] = specs;
	Positions[id.x] = pos;
}
