#pragma kernel Generate
#pragma kernel TimeStep
#pragma kernel ProcessCritters

struct CritterData {
	float2 position;
	float health;
	float maxConsumption;
	float timeDrain;
	float consumptionThisFrame;
};

Texture2D<float4> Seed;
SamplerState samplerSeed;
SamplerState MyLinearClampSampler;
RWTexture2D<float4> Energy;
RWStructuredBuffer<CritterData> Critters;

int tex_Width, tex_Height;
float Unity_DeltaTime;
float Sim_MaxEnergy;


[numthreads(32,32,1)]
void Generate (uint3 id : SV_DispatchThreadID)
{
	float4 color = 0;
	color.g = Seed.SampleLevel(MyLinearClampSampler, float2((float)id.x / tex_Width, (float)id.y / tex_Height), 0).r;
	Energy[id.xy] = color;
}

[numthreads(64,1,1)]
void ProcessCritters (uint3 id : SV_DispatchThreadID)
{
	CritterData critter = Critters[id.x];
	float4 color;
	color = Energy.Load(float2((float)id.x / tex_Width, (float)id.y / tex_Height));
}

[numthreads(32,32,1)]
void TimeStep (uint3 id : SV_DispatchThreadID)
{
    //Update the energy texture each frame
    //Red = current energy
    //Green = energy added / second
    //Blue = energy removed / second by critters

	float4 color = Energy[id.xy];
	color.r += Energy[id.xy].g * Unity_DeltaTime;
	color.r -= Energy[id.xy].b * Unity_DeltaTime;
	color.b = 0;
	color.r = clamp(color.r, 0, Sim_MaxEnergy);
	Energy[id.xy] = color;
}
