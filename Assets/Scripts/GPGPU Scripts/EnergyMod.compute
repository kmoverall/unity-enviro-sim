#pragma kernel TimeStep

struct CritterData {
	float2 position;
	float health;
	float maxConsumption;
	float timeDrain;
	float energyThisFrame;
};

Texture2D<float4> Seed;
SamplerState samplerSeed;
SamplerState MyLinearClampSampler;
RWTexture2D<float4> Energy;
RWStructuredBuffer<CritterData> Critters;

int tex_Width, tex_Height;
float Unity_DeltaTime;
float Sim_MaxEnergy;
float Sim_MaxEnergyRate;
float Sim_MaxHealth;

[numthreads(1024,1,1)]
void TimeStep (uint3 id : SV_DispatchThreadID)
{
	CritterData critter;
	critter.position = float2(0,1);
	critter.health = id.x;
	critter.maxConsumption = id.x;
	critter.timeDrain = id.x;
	critter.energyThisFrame = id.x;

	Critters[id.x] = critter;

	/*
	float4 color;
	color = Energy.Load(critter.position);

	float newEnergy = critter.health + max(color.g, critter.maxConsumption * Unity_DeltaTime);
	newEnergy = clamp(newEnergy, 0, Sim_MaxHealth);
	critter.energyThisFrame = newEnergy - critter.health;
	critter.health = newEnergy - critter.timeDrain;
	critter.health = clamp(critter.health, 0, Sim_MaxHealth);

	color.b = critter.energyThisFrame;

	Energy[(int2)critter.position] = color;
	Critters[id.x] = critter;
	*/
}
